{
	"mondooPolicy": {
		"prefix": "mondoo:policy",
		"body": [
			"# Read more about the policy structure at https://mondoo.com/docs/platform/policies/overview",
			"policies:",
			"- uid: ${1:sshd}",
			"  name: ${2:SSH Server Policy}",
			"  version: 1.0.0",
			"  is_public: true",
			"  authors:",
			"  - name: Jane Doe",
			"    email: jane@example.com",
			"  docs:",
			"    desc:",
			"      Policy description including overview, rationale, and external references.",
			"  tags:",
			"    key: value",
			"    another-key: another-value",
			"  specs:",
			"  - asset_filer:",
			"      query: |",
			"        platform.family.contains(_ == 'unix')",
			"  scoring_queries:",
			"    sshd-score-01",
			"  data_queries:",
			"    sshd-data-01",
			"props:",
			"  - uid: ",
			"    title: ",
			"    query: ",
			"queries:",
			"- uid: sshd-score-01",
			"  title: Ensure SSH MaxAuthTries is set to 4 or less",
			"  docs:",
			"    desc: |",
			"      The MaxAuthTries parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half the number, error messages will be written to the syslog file detailing the login failure.",
			"    audit: Run the `sshd -T | grep maxauthtries` command and verify that output MaxAuthTries is 4 or less",
			"    remediation: |",
			"      Open your `/etc/ssh/sshd_config` and set `MaxAuthTries` to `4`.",
			"  refs:",
			"    - title: CIS Distribution Independent Linux.",
			"    - url: https://www.cisecurity.org/benchmark/distribution_independent_linux/",
			"  query: |",
			"    # @msg sshd_config failure",
			"    #",
			"    sshd.config.params[\"MaxAuthTries\"] <= 4",
			"- uid: sshd-data-01",
			"  title: Gather SSH config params",
			"  query: sshd.config.params"
		],
		"description": "Mondoo policy bundle snippet"
	},
	"mondooPolicyAWS": {
		"prefix": "mondoo:policy:aws",
		"body": [
			"# Read more about the policy structure at https://mondoo.com/docs/platform/policies/overview",
			"policies:",
			"- uid: ${1:aws-policy-uid}",
			"  name: ${2:Policy Name}",
			"  version: 1.0.0",
			"  is_public: true",
			"  authors:",
			"  - name: Jane Doe",
			"    email: jane@example.com",
			"  docs:",
			"    desc:",
			"      Policy description including overview, rationale, and external references.",
			"  tags:",
			"    key: value",
			"    another-key: another-value",
			"  specs:",
			"  - asset_filer:",
			"      query: |",
			"        platform.name = \"aws\"",
			"        platform.name = \"api\"",
			"  scoring_queries:",
			"    aws-query-1",
			"  data_queries:",
			"    data-query-1",
			"props:",
			"  - uid: ",
			"    title: ",
			"    query: ",
			"queries:",
			"- uid: aws-security-mfa-enabled",
			"  title: Ensure users with console access have MFA enabled",
			"  docs:",
			"    desc: |",
			"      Users that log in to the AWS console should use MFA.",
			"    audit: |",
			"      __Mondoo Shell__",
			"      ",
			"      1. Open a Terminal.",
			"      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`.",
			"      3. Run the following command in Mondoo Shell",
			"      ",
			"         ```bash",
			"         mondoo> aws.iam.credentialReport.where( passwordEnabled == true && mfaActive == false )",
			"         ```",
			"      ",
			"         Example Output",
			"      ",
			"         ```bash",
			"         aws.iam.credentialReport.where: [",
			"           0: aws.iam.usercredentialreportentry id = aws/iam/credentialreport/arn:aws:iam::123443755555:user/robert",
			"            1: aws.iam.usercredentialreportentry id = aws/iam/credentialreport/arn:aws:iam::1234375555:user/jimmy",
			"            2: aws.iam.usercredentialreportentry id = aws/iam/credentialreport/arn:aws:iam::123443755555:user/johnpaul",
			"            3: aws.iam.usercredentialreportentry id = aws/iam/credentialreport/arn:aws:iam::123443755555:user/john",
			"         ]",
			"         ```",
			"    remediation: |",
			"      To enable MFA for users within your AWS account see [Enabling a virtual multi-factor authentication (MFA) device (console)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-iam-user)",
			"    refs:",
			"      - title: Enabling a virtual multi-factor authentication (MFA) device (console).",
			"      - url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-iam-user",
			"  query: |",
			"    # @msg Found ${length} users that do not have MFA enabled",
			"    #",
			"    # {{arn passwordEnabled properties['user_creation_time']}}",
			"    aws.iam.credentialReport.where( passwordEnabled == true ) { mfaActive == true }"
		],
		"description": "Mondoo policy example for Amazon Web Service"
	},
	"mondooPolicyTerraform": {
		"prefix": "mondoo:policy:terraform",
		"body": [
			"# Read more about the policy structure at https://mondoo.com/docs/platform/policies/overview",
			"policies:",
			"- uid: ${1:terraform-static-analysis}",
			"  name: ${2:Policy Bundle Name}",
			"  version: 1.0.0",
			"  is_public: true",
			"  authors:",
			"  - name: Jane Doe",
			"    email: jane@example.com",
			"  docs:",
			"    desc:",
			"      Policy description including overview, rationale, and external references.",
			"  tags:",
			"    key: value",
			"    another-key: another-value",
			"  specs:",
			"  - asset_filer:",
			"      query: |",
			"        platform.name = \"terraform\"",
			"        # The following filters by Terraform provider so the policy only executes against Terraform targeting AWS.",
			"        terraform.provider = { nameLabel == \"aws\" }",
			"  scoring_queries:",
			"    terraform-aws-security-no-static-credentials-in-providers: null",
			"  data_queries:",
			"    data-query-1",
			"props:",
			"  - uid: ",
			"    title: ",
			"    query: ",
			"queries:",
			"- uid: terraform-aws-security-no-static-credentials-in-providers",
			"  title: Providers should not contain hard-coded credentials",
			"  docs:",
			"    desc: |",
			"      Hard-coded credentials are not recommended in any Terraform configuration and risks secret leakage should this file ever be committed to a public version control system.",
			"    audit: |",
			"      Check for the existence of hard-coded credentials in the AWS Provider",
			"      ",
			"         ```hcl",
			"         provider \"aws\" {",
			"           region         = \"us-west-2\" {",
			"           access_key     = \"my-access-key\"",
			"           secret_key     = \"my-secret-key\"",
			"         }",
			"         ```",
			"    remediation: |",
			"      The following are more secure alternatives for configuring the AWS provider:",
			"    ",
			"      __Environment Variables__",
			"      You can provide your credentials via the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`, environment variables, representing your AWS Access Key and AWS Secret Key, respectively. Note that setting your AWS credentials using either these (or legacy) environment variables will override the use of `AWS_SHARED_CREDENTIALS_FILE` and `AWS_PROFILE`. The `AWS_DEFAULT_REGION` and `AWS_SESSION_TOKEN` environment variables are also used, if applicable:",
			"    ",
			"      ```bash",
			"      $ export AWS_ACCESS_KEY_ID=\"anaccesskey\"",
			"      $ export AWS_SECRET_ACCESS_KEY==\"asecretkey\"",
			"      $ export AWS_DEFAULT_REGION=\"us-east-2\"",
			"      $ terraform plan",
			"      ```",
			"    ",
			"      ```hcl",
			"      provider \"aws\"",
			"      ```",
			"    ",
			"      __Assumed Role__",
			"      If provided with a role ARN, Terraform will attempt to assume this role using the supplied credentials.",
			"    ",
			"         ```hcl",
			"         provider \"aws\" {",
			"           assumed_role {",
			"             role_arn         = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\"",
			"             session_name     = \"SESSION_NAME\"",
			"             external_id      = \"EXTERNAL_ID\"",
			"           }",
			"         }",
			"         ```",
			"    refs:",
			"      - title: Terraform Registry Docs - AWS Provider - Authentication (MFA) device (console).",
			"      - url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-iam-user",
			"  query: |",
			"    # @msg Found ${length} users that do not have MFA enabled",
			"    # expected: ${$expected}",
			"    # actual: ${$actual}",
			"    # position: ${_.start.path at ${_.start.line}",
			"    # block:",
			"    #   ${ _.snippet",
			"    ",
			"    terraform.providers.where( nameLabel == \"aws\" ) {",
			"      arguments[\"access_key\"] {",
			"        _.find(/(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}/).all(\"AKIAIOSFODNN7EXAMPLE\")",
			"      }",
			"      arguments[\"secret_key\"] {",
			"        _.find(/(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}/).all(\"AKIAIOSFODNN7EXAMPLE\")",
			"      }",
			"    }"
		],
		"description": "Mondoo policy example for Terraform Static analysis"
	},
	"mondooControl": {
		"prefix": "mondoo:control",
		"body": [
			"- uid: ${1:mondoo-policy-uid}",
			"  title: ${2:Control title}",
			"  docs:",
			"    desc: |",
			"      ${3:description and rationale goes here}",
			"    audit: |",
			"      ${4:steps to audit for this control}",
			"    remediation: |",
			"      ${5:remediation steps go here}",
			"    refs:",
			"      - title: Title for external refernce.",
			"      - url: URL for external reference",
			"  query: |",
			"    # @msg Can be used to format descriptive output for the control",
			"    #",
			"    # Specify MQL fields {{}}",
			"    ${6:mql query}"
		],
		"description": "Mondoo policy control snippet"
	}
}